#include <stdio.h>
#include <stdlib.h>

// Definition for a singly-linked list node
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* newNode(int data) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->data = data;
    new_node->next = NULL;
    return new_node;
}

// Function to merge two sorted linked lists
Node* mergeTwoLists(Node* list1, Node* list2) {
    // Create a dummy node to act as the head of the merged list
    Node* dummy = newNode(0);
    Node* current = dummy;

    // Traverse both lists while both have nodes
    while (list1 != NULL && list2 != NULL) {
        if (list1->data <= list2->data) {
            current->next = list1;
            list1 = list1->next;
        } else {
            current->next = list2;
            list2 = list2->next;
        }
        current = current->next;
    }

    // Attach the remaining nodes from either list1 or list2
    current->next = (list1 == NULL) ? list2 : list1;

    // The merged list starts from the next node of the dummy
    return dummy->next;
}

// Function to print the linked list
void printList(Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

// Example usage
int main() {
    // Create two sorted linked lists
    Node* list1 = newNode(1);
    list1->next = newNode(3);
    list1->next->next = newNode(5);

    Node* list2 = newNode(2);
    list2->next = newNode(4);
    list2->next->next = newNode(6);

    // Merge the two lists
    Node* mergedList = mergeTwoLists(list1, list2);

    // Print the merged list
    printList(mergedList);

    return 0;
}
